<div id="item_rep_frame" class="frame bb">
  <div id="item_table" class="item_viewer bb">
    <!-- <div class="item_table_row template"> -->
      <div class="item_table_cell template bb">
        <div class="contents bb">
          <div class="title"></div>
          <div class="rep">
            <select class="rep_select">
              <option value="0" "selected">-</option>
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
            </select>
          </div>
          <img class="img" />
        </div>
      </div>
    <!-- </div> -->
  </div>
  <button id="selectRepBtn">評価完了</button>
</div>

<div id="item_order_frame" class="frame bb">
  <div id="item_rep_list" class="item_viewer bb">
    <div class="list_title">評価 <span id="list_title_rep_num">-</span> の順位</div>
    <div class="item_rep_row template bb">
      <div class="rank bb">
        <select class="rank_sel"></select>
      </div>
      <img class="img bb" />
      <div class="title bb"></div>
    </div>
  </div>
  <button id="selectOrderBtn">次のリストへ</button>
  <button id="sendBtn">送信</button>
</div>

<input id="user_id" type="hidden" value="<?= $this->user_id ?>" />


<?php

$this->inlineScript()->appendScript(
<<<__END__

var \$itemTable = \$("#item_table"),
    \$itemCellTmp = \$itemTable.find(".item_table_cell").removeClass("template").remove(),
    \$itemRepList = \$("#item_rep_list"),
    \$itemRepTmp = \$itemRepList.find(".item_rep_row").removeClass("template").remove(),
    \$selectRepBtn = \$("#selectRepBtn"),
    \$selectOrderBtn = \$("#selectOrderBtn"),
    \$sendBtn = \$("#sendBtn").hide();
    canSendFlag = false, items = [], reps = [],
    REQ_ALL = "all_", REQ_EYE = "eye_",
    userId = $("#user_id").val();


getRecoms(REQ_EYE + userId, \$itemTable);

\$selectRepBtn.on("click", function(){
  var repsOrdered = {5: [], 4: [], 3: [], 2: [], 1: []};
  for(var ri in reps){
    var rep = reps[ri];
    if(rep == null){ continue; }
    if(rep["reputation"] == void 0 || rep["reputation"] == null){
      \$itemTable.find(".item_table_cell").eq(ri).find("select").focus();
      alert("評価をしていない商品があります");
      return;
    }
    if(rep["reputation"] < 1 || rep["reputation"] > 5){
      alert("評価値は1から5の値を入力してください");
      return;
    }

    repsOrdered[+rep["reputation"]].push(rep);
  }
  \$selectRepBtn.prop("disabled", true);

  log(repsOrdered);
  setRepItems(5, repsOrdered);
});





function setRecommendations(_items, \$_itemTable){
  items = _items;
  reps = \$.extend(true, [], items);
  for(var i in _items){
    (function(_i){
      var item = _items[_i]["itemInfo"], score = _items[_i]["score"];
      var \$itemCell = \$itemCellTmp.clone();
      // log("item", item);
      \$itemCell.attr("data-id", item["id"]);
      \$itemCell.find(".title").html(item["name"]);
      \$itemCell.find(".img")
      // .css({"background": "url(\""+item["url_image"]+"\") no-repeat center center / contain"})
      .attr("src", item["url_image"])
      .on("load", function(){ log("loaded"); })
      .on("error", function(){
        // log("error load " + item["url_image"]);
        reps[_i] = null;
      });

      \$itemCell.find("select.rep_select").on("change", function(){
        if(reps[_i] == null){ return; }
        var itemRep = $(this).find("option:selected").val();
        if(itemRep == void 0 || itemRep == null || itemRep == ""){
          log("illegal item selected [item" + _i + "] " + itemRep);
          return;
        }
        reps[_i]["reputation"] = +itemRep;
        log("items selected [item" + _i + "] " + itemRep);
      });

      \$_itemTable.append(\$itemCell);
    })(i);
  }
}


function getRecoms(_api_url, \$_itemTable) {
  var url = "http://localhost/app/rvr/" + _api_url,
      query = {};

  // log("get recoms", url);

  post({
    "url": url,
    "type": "get",
    "query": query,
    "success": function(_data){
      log("success", _data);
      setRecommendations(_data, \$_itemTable);
      canSendFlag = true;
    },
    "failure": function(_data){
      log("failure", _data);
    }
  });
}



function setRepItems(_repNum, _repsOrdered) {
  \$selectOrderBtn.off();
  \$itemRepList.find(".item_rep_row").remove();

  \$("#list_title_rep_num").text(_repNum);

  var repsO = _repsOrdered[_repNum],
      orderOffset = 0;
  for(var roi in _repsOrdered){
    if(roi <= _repNum){ continue; }
    var reps = _repsOrdered[roi];
    orderOffset += reps.length;
  }
  for(var ri in repsO){ repsO[ri]["rank"] = orderOffset + parseInt(ri) + 1; }
  setItemRepDOMs(repsO, orderOffset);

  if(_repNum == 1){
    log(_repsOrdered);
    \$selectOrderBtn.hide();
    \$sendBtn.show().on("click", function(){ clickedSendBtn(); });
    return;
  }

  \$selectOrderBtn.prop("disabled", false).on("click", function(){
    log(_repsOrdered);
    \$selectOrderBtn.prop("disabled", true);
    setRepItems(_repNum-1, _repsOrdered);
  });
}
function setItemRepDOMs(_repsO, _offset){
  \$itemRepList.find(".rank_sel").off();
  \$itemRepList.find(".item_rep_row").remove();
  for(var ri in _repsO){
    (function(_ri){
      var rep = _repsO[_ri];
      if(rep == null){ return; }
      var \$itemRep = \$itemRepTmp.clone();
      for(var i=0; i<_repsO.length; i++){
        \$itemRep.find(".rank_sel").append(\$("<option value=" + (i+1) + ">" + (i+1) + "</option>"));
      }
      \$itemRep.find(".rank_sel").val(rep["rank"]-_offset).off().on("change", function(){
        changeRank(_ri, parseInt(\$(this).val())-1+"", _repsO, _offset);
      });
      \$itemRep.find(".img").attr("src", rep["itemInfo"]["url_image"]);
      \$itemRep.find(".title").text(rep["itemInfo"]["name"]);
      \$itemRep.appendTo(\$itemRepList);
    })(ri);
  }
}
function changeRank(_ri, _desti, _repsO, _offset){
  log(_ri, _desti);
  log(_repsO);
  log(_repsO[_ri], _repsO[_desti]);
  _repsO[_ri]["rank"] = _offset + parseInt(_desti) + 1;
  _repsO[_desti]["rank"] = _offset + parseInt(_ri) + 1;
  _repsO.sort(function(sa, sb){
    var aRank = +sa["rank"], bRank = +sb["rank"];
    if(aRank < bRank){ return -1; }
    if(aRank > bRank){ return 1;}
    else{ return 0; }
  });
  setItemRepDOMs(_repsO, _offset);
}
function clickedSendBtn(){
  reps.some(function(sv, si){ if(sv == null){ reps.splice(si,1); }  });
  reps.sort(function(sa, sb){
    var aRank = +sa["rank"], bRank = +sb["rank"];
    if(aRank < bRank){ return -1; }
    if(aRank > bRank){ return 1;}
    else{ return 0; }
  });
  postReputations(reps);
}




function postReputations(_reps) {
  log("post reputation");
  var url = "http://localhost/app/rep/",
      query = {};

  var selectedReps = [];
  for(var i in _reps){
    var selRep = {
      "item_id": +_reps[i]["itemInfo"]["id"],
      "reputation": +_reps[i]["reputation"],
      "rank": +_reps[i]["rank"]
    };
    selectedReps.push(selRep);
  }

  query["reps"] = selectedReps;
  query["user_id"] = +userId;
  query["type"] = "eye";
  log(query);
  // return;
  post({
    "url": url,
    "type": "post",
    "query": query,
    "success": function(_data){
      log("success", _data);
    },
    "failure": function(_data){
      log("failure", _data);
    }
  });
}






function log(_){ console.log.apply(console, arguments); }
function post(_opt){
  var url = _opt["url"],
      type = _opt["type"],
      query = _opt["query"],
      successCB = _opt["success"],
      failureCB = _opt["failure"];
  $.ajax({
    "type": type,
    "url": url,
    "data": JSON.stringify(query),
    "contentType": "application/json",
    "dataType": "json",
    "success": function(_data){ successCB(_data["data"]) },
    "failure": function(_data){ failureCB({"statusCode": _data["status"], "response": _data["responseText"]}); }
  });
}

__END__
);
